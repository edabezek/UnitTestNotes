Test Çeþitleri
Unit Test : Metot testidir. 
Integration Test : Uygulamadaki modüllerin birbirleriyle nasýl davranýþ sergilediklerinin kontrol edildiði test türüdür.
End to End Test : Bir uygulamanýn baþtan sona kadar nasýl davranýþ sergileyeceðinin test edilmesidir.
UI Test : Kullanýcý arayüzünün test edilmesidir.


Unit Test 3 aþamadan oluþur 
Arrange : Hazýrlýklarýmýzý yaptýðýmýz kýsým,deðiþken tanýmlarý 
Act : Fonksiyonlarý çaðýrdýðýmýz kýsým
Assert : Testimizin geçerli olup olmadýðýný belirleyen kýsým 

Amacýmýz uygulamayý çalýþtýrmadan fonksiyonun doðruluðunu test etmek

Testing Lifecyle(Initialize and cleanup)
Test Level
Class Level
Assembly Level

Test Level için ShoppingCard uygulamasý :
	-Her test metodundan önce ve sonra iþlemler yapabiliriz,bunlar için TestInitialize ve TestCleanUp kullanabiliriz.
	-Product ,ürünleri 
	-CardItem,sepete ekleyeceðimiz sýnýfý temsil eder
	-Sepete ,ekleme ,silme iþlemlerini gerçekleþtirecek sýnýf CardManager
	-Sepet için bilgileri session'da tutacaðýz, db baðlantýsý olmayacak
	-TestInitialize , tekrar eden metodlarýn olmamasý için, her test edilecek metottan önce çalýþacak bir genel metod oluþturmak demek.Her test 
	metodunun ortak çalýþan kodlarýný bu metoda yazarýz.CardTests için yazdýðýmýz metotlarý CardTestsTestLevel'de yaptýk.
	-Her testten önce TestInitialize çalýþacak ve sepete bir tane ürün ekleyecek.
	-TestCleanup ,her test metodundan sonra çalýþacak olan metot


Class Level için ShoppingCardClassLevel uygulamasý :
	-Önce TestInitialize çalýþýr,sonra sýrasýyla test metotlarý,son olarak class cleanup metodu çalýþýr.
	-ClassInitialize ve ClassCleanup statik olmak zorunda,herhangi bir deðer return edemezler.Ayný zamanda ClassInitialize TestContext tipinde
	bir parametre almalýdýr.
	-ClassInitialize ve ClassCleanup her test class'da birer tane olur.

Assembly Level için AssemblyLevel uygulamasý :
	-Bütün unit test projesi boyunca bir defalýk ilk olacak þekilde AssemblyInitialize çalýþýr,son olacak þekilde de AssemblyCleanup çalýþýr.
	-AssemblyInitialize ve AssemblyCleanup projede 1 tane olur, hangi class'a yazdýðýmýz önemli deðildir.

Expected Exception

	-Testlerin geçebilmesi için uygulama içinde olabilecek hatalarý bilmesi gerekiyor.
	-Hata oluþmalý ama test'ten geçmiyor,bu durumda kullanýrýz.Metoda beklediðimiz hata tipini veririz.Burada birebir tiplere bakar , baþka ex 
	tiplerini de geçerli kýlmak için AllowDerivedTypes=true eklenir.

Asserting 

	Assert : Compare two values,many methods with several overloads
	CollectionAssert : Compare two values,check items in collection
	StringAssert : Compare strings

TestContext 

	-Uygulama içerisinde,çalýþma anýnda bilgi veren nensedir.
	-Testin adýný,birimini almak ,
	-Web servisi test ettiðimizde ,web servisle ilgili url bilgileri,durumu bilgisini almak 
	-Web forms uygulamasýný test ettiðimizde page nesnesini almak,
	-Data-driven test yönteminde her bir veriyi elde etmek için kullanýlýr.

Data-Driven Unit Test

	-Microsot'un test framework'ü ile veri temelli birim testleri oluþurabiliyoruz.
	-Veri temelli birim testleri , kullanýlan kaynaktaki her satýr için birim testinin otomatik çalýþtýrýlmasý esasýna dayalýdýr.
	-Kaynak olarak veritabaný,excel, vs olabilir
	-Ayný birim testini dinamik deðerlerle test etmek için kullanýlýr.
	-Diðer kullanýmý, veritabanýna veri import etmek istediðimizde kullanýrýz.Örneðin excel dosyasýný veritabanýna import etmemiz gerekiyor diyelim.
	Fakat excel'deki veriler bizim istediðimiz formata uygun mu (email formatý vs) , bunu veritabanýna import etmeden kontrol etmek zor bu yüzden
	bizim iþ kurallarýmýza göre test etmeliyiz.
	-Burada her satýrdaki veriyi yakalamak için TestContext nesnesini kullanýrýz.

DataDrivenUnitTest Proje Detaylarý 

	-Kaynak olarak elimizde xml veri seti var,bunlarý database'e kaydetmeden önce iþ kuralýna uygunluðunu test edeceðiz.
	-Configürasyon olarak kod yazacaðýz.
	-Businnes layer'da Kullanýcý için kurallar yazdýk.
	-xml dosyasýný bin/debug altýna gelmesi için properties'den kopyalanabilir olmasýný deðiþtirdik.

	-Kaynak olarak veritabanýný kullanacaðýz,configürasyon için xml dosyasý tercih edeceðiz.
	-Burada veriler testin geçip geçmeyeceðine karar veren deðerler olacak.
	-Businnes Layer'da, ÝslemManager'da bir formülümüz var bunun çalýþýp çalýþmadýðýný kontrol edeceðiz.
	-SQl'de Demo db ve Sayýlar tablosu oluþturduk.(kolonlar : x,y,beklenen)

Test Attributes

	Owner : Test metot sahibini belirler
	TestCategory : Testleri bir gruba göre gruplamak için
	Priorty : Öncelik belirterek gruplayabiliriz
	TestProperty : Spesifik bir duruma göre gruplamak için
	Ignore : Testi pas geçmek için
	TimeOut : Teste timeout süresi vermek için kullanýlýr,milisaniye ile verilir
	Description : Açýklama

Ordered Test 

	Bazý durumlarda testlerimizi belli bir sýraya göre çalýþtýrmak isteyebiliriz,bu durumlarda kullanýlýr.
	Versiyon geçiþi için,
	https://stackoverflow.com/questions/52714838/unable-to-find-add-ordered-test-item-to-my-project-in-visual-studio-2017-enterpr

Conclusion 

	Karþýlaþabileceðimiz hatalardan biri unit test'in integration test olmasý.En büyük nedeni yanlýþ yazýlým tasarýmý kullanýlmasý.
	Eðer geliþtirdiðimiz uygulama Solid'e uygunsa nesneldir,testlerimizi uygulamamýz kolay olur.
	Mock, test konseptinde sahte object üretmektir. Faydasý Unit Test’in temel kurallarýndan olan Test In Isolation
	prensibini karmaþýk yapýlara uygulayabilmemizdir.

Test First Development

	Kýrmýzý : Hata verecek bir test yazýlýr
	Yeþil : Testi geçecek en basit kod yazýlýr
	Refactor : Test'i geçebilecek kod yazýlýr.